plugins {
    id "com.jfrog.bintray" version "1.7"
    id "com.github.dcendents.android-maven" version "1.5"
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

ext {
    bintrayName = 'eventawareness-Android-SDK'
    artifact = 'eventawareness-android-sdk'

    libraryName = 'eventawareness Android SDK'
    libraryDescription = 'An Android library for processing personal data access events.'
    libraryVersion = "0.1.7"

    bintrayRepo = 'eventawareness'
    bintrayOrganization = "eventawareness"
    publishedGroupId = 'io.github.eventawareness'

    siteUrl = 'https://github.com/xinyu1118/EventAwareness'
    gitUrl = 'https://github.com/xinyu1118/EventAwareness.git'
    githubRepository= 'xinyu1118/EventAwareness'

    developerId = 'xinyu1118'
    developerName = 'Xinyu Yang'
    developerEmail = 'yangxy9113@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

android {
    compileSdkVersion 25
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 17
        versionName "0.1.7"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    android {
        lintOptions {
            abortOnError false
        }
    }
}

dependencies {
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'org.greenrobot:eventbus:3.0.0'
    implementation 'org.altbeacon:android-beacon-library:2+'

    // third-party packages
    compileOnly 'com.dropbox.core:dropbox-core-sdk:2.1.1'
    compileOnly 'com.google.android.gms:play-services-awareness:16.0.0'
    compileOnly 'com.google.android.gms:play-services-vision:16.2.0'
    implementation 'com.google.android.gms:play-services-location:16.0.0'

    compileOnly ('com.google.api-client:google-api-client-android:1.20.0') {
        exclude group: 'org.apache.httpcomponents'
    }
    compileOnly ('com.google.apis:google-api-services-gmail:v1-rev29-1.20.0') {
        exclude group: 'org.apache.httpcomponents'
    }
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
}

group = publishedGroupId                               // Maven Group ID for the artifact

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

version = libraryVersion

task doclet(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    destinationDir = file("build/eventawarenessDocs/").absoluteFile

    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile

    options.docletpath = [file('../doclet/build/libs/doclet.jar')]
    options.doclet = "io.github.eventawareness.doclet.PSDoclet"
}


task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

//task javadoc(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//    classpath += configurations.compile
//    classpath += configurations.provided
//    destinationDir = file("build/docs/").absoluteFile
//}
//
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}

artifacts {
//    archives javadocJar
    archives sourcesJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
//        userOrg = bintrayOrganization
        desc = libraryDescription
        websiteUrl = siteUrl
        issueTrackerUrl = siteUrl+'/issues'
        vcsUrl = gitUrl
        licenses = allLicenses
        githubRepo = githubRepository //Optional Github repository
        githubReleaseNotesFile = 'README.md' //Optional Github readme file
        publish = false
        publicDownloadNumbers = true

        version {
            desc = libraryDescription
            gpg {
                sign = true // Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password") // Optional. The passphrase for GPG signing'
            }
        }
    }
}

repositories {
    mavenCentral()
}

task makeJar(type: Copy) {
    delete'build/libs/eventawareness.jar'
    from('build/intermediates/bundles/release/')
    into('build/libs/')
    include('classes.jar')
    rename('classes.jar','eventawareness.jar')
}
makeJar.dependsOn(build)
